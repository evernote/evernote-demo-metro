/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace Evernote.EDAM.NoteStore
{

  #if !NETFX_CORE
  [Serializable]
  #endif
  public partial class RelatedNotesGeographicRange : TBase
  {
    private double _latitudeCenter;
    private double _latitudePad;
    private double _longitudeCenter;
    private double _longitudePad;
    private double _scoreBoost;
    private RelatedNotesRequirement _requirement;

    public double LatitudeCenter
    {
      get
      {
        return _latitudeCenter;
      }
      set
      {
        __isset.latitudeCenter = true;
        this._latitudeCenter = value;
      }
    }

    public double LatitudePad
    {
      get
      {
        return _latitudePad;
      }
      set
      {
        __isset.latitudePad = true;
        this._latitudePad = value;
      }
    }

    public double LongitudeCenter
    {
      get
      {
        return _longitudeCenter;
      }
      set
      {
        __isset.longitudeCenter = true;
        this._longitudeCenter = value;
      }
    }

    public double LongitudePad
    {
      get
      {
        return _longitudePad;
      }
      set
      {
        __isset.longitudePad = true;
        this._longitudePad = value;
      }
    }

    public double ScoreBoost
    {
      get
      {
        return _scoreBoost;
      }
      set
      {
        __isset.scoreBoost = true;
        this._scoreBoost = value;
      }
    }

    public RelatedNotesRequirement Requirement
    {
      get
      {
        return _requirement;
      }
      set
      {
        __isset.requirement = true;
        this._requirement = value;
      }
    }


    public Isset __isset;
    #if !NETFX_CORE
    [Serializable]
    #endif
    public struct Isset {
      public bool latitudeCenter;
      public bool latitudePad;
      public bool longitudeCenter;
      public bool longitudePad;
      public bool scoreBoost;
      public bool requirement;
    }

    public RelatedNotesGeographicRange() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Double) {
              LatitudeCenter = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Double) {
              LatitudePad = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.Double) {
              LongitudeCenter = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.Double) {
              LongitudePad = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.Double) {
              ScoreBoost = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I32) {
              Requirement = (RelatedNotesRequirement)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("RelatedNotesGeographicRange");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.latitudeCenter) {
        field.Name = "latitudeCenter";
        field.Type = TType.Double;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(LatitudeCenter);
        oprot.WriteFieldEnd();
      }
      if (__isset.latitudePad) {
        field.Name = "latitudePad";
        field.Type = TType.Double;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(LatitudePad);
        oprot.WriteFieldEnd();
      }
      if (__isset.longitudeCenter) {
        field.Name = "longitudeCenter";
        field.Type = TType.Double;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(LongitudeCenter);
        oprot.WriteFieldEnd();
      }
      if (__isset.longitudePad) {
        field.Name = "longitudePad";
        field.Type = TType.Double;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(LongitudePad);
        oprot.WriteFieldEnd();
      }
      if (__isset.scoreBoost) {
        field.Name = "scoreBoost";
        field.Type = TType.Double;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(ScoreBoost);
        oprot.WriteFieldEnd();
      }
      if (__isset.requirement) {
        field.Name = "requirement";
        field.Type = TType.I32;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)Requirement);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("RelatedNotesGeographicRange(");
      sb.Append("LatitudeCenter: ");
      sb.Append(LatitudeCenter);
      sb.Append(",LatitudePad: ");
      sb.Append(LatitudePad);
      sb.Append(",LongitudeCenter: ");
      sb.Append(LongitudeCenter);
      sb.Append(",LongitudePad: ");
      sb.Append(LongitudePad);
      sb.Append(",ScoreBoost: ");
      sb.Append(ScoreBoost);
      sb.Append(",Requirement: ");
      sb.Append(Requirement);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
