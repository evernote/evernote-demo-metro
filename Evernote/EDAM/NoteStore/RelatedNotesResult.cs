/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace Evernote.EDAM.NoteStore
{

  #if !NETFX_CORE
  [Serializable]
  #endif
  public partial class RelatedNotesResult : TBase
  {
    private List<RelatedNotesHit> _hits;
    private int _totalNotes;
    private long _searchTime;
    private string _query;

    public List<RelatedNotesHit> Hits
    {
      get
      {
        return _hits;
      }
      set
      {
        __isset.hits = true;
        this._hits = value;
      }
    }

    public int TotalNotes
    {
      get
      {
        return _totalNotes;
      }
      set
      {
        __isset.totalNotes = true;
        this._totalNotes = value;
      }
    }

    public long SearchTime
    {
      get
      {
        return _searchTime;
      }
      set
      {
        __isset.searchTime = true;
        this._searchTime = value;
      }
    }

    public string Query
    {
      get
      {
        return _query;
      }
      set
      {
        __isset.query = true;
        this._query = value;
      }
    }


    public Isset __isset;
    #if !NETFX_CORE
    [Serializable]
    #endif
    public struct Isset {
      public bool hits;
      public bool totalNotes;
      public bool searchTime;
      public bool query;
    }

    public RelatedNotesResult() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.List) {
              {
                Hits = new List<RelatedNotesHit>();
                TList _list68 = iprot.ReadListBegin();
                for( int _i69 = 0; _i69 < _list68.Count; ++_i69)
                {
                  RelatedNotesHit _elem70 = new RelatedNotesHit();
                  _elem70 = new RelatedNotesHit();
                  _elem70.Read(iprot);
                  Hits.Add(_elem70);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              TotalNotes = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I64) {
              SearchTime = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              Query = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("RelatedNotesResult");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Hits != null && __isset.hits) {
        field.Name = "hits";
        field.Type = TType.List;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, Hits.Count));
          foreach (RelatedNotesHit _iter71 in Hits)
          {
            _iter71.Write(oprot);
            oprot.WriteListEnd();
          }
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.totalNotes) {
        field.Name = "totalNotes";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(TotalNotes);
        oprot.WriteFieldEnd();
      }
      if (__isset.searchTime) {
        field.Name = "searchTime";
        field.Type = TType.I64;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(SearchTime);
        oprot.WriteFieldEnd();
      }
      if (Query != null && __isset.query) {
        field.Name = "query";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Query);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("RelatedNotesResult(");
      sb.Append("Hits: ");
      sb.Append(Hits);
      sb.Append(",TotalNotes: ");
      sb.Append(TotalNotes);
      sb.Append(",SearchTime: ");
      sb.Append(SearchTime);
      sb.Append(",Query: ");
      sb.Append(Query);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
